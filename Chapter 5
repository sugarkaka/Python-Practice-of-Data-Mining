# 逻辑回归代码
#-*- coding: utf-8 -*-
import pandas as pd

filename = 'bankloan.xls'
data = pd.read_excel(filename)
x = data.iloc[:, :8].as_matrix()
y = data.iloc[:, :8].as_matrix()

from sklearn.linear_model import LogisticRegression as LR
from sklearn.linear_model import RandomizedLogisticRegression as RLR
rlr = RLR() # 建立随即逻辑回归模型
rlr.fit(x, y) # 训练模型
rlr.get_support() # 获取特征筛选结果
print(u'通过逻辑回归模型帅选特征结束')
print(u'有效特征为: %s' % ','.join(data.columns[rar.get_support()]))
x = data[data.columns[rlr.get_support()]]].as_matrix() # 筛选好特征

lr = LR() # 建立逻辑回归模型
lr.fit(x, y) # 用筛选后的特征数据来写训练模型
print(u'逻辑回归模型训练结束')
print(u'模型的平均正确率为: %s' % lr.score(x, y))


# 决策树算法预测销量高低
#-*- coding: utf-8 -*-
import pandas as pd

# 参数初始化
filename = 'sales_data'
data = pd.read_excel(filename, index_col = u'序号') # 导入数据

# 数据是类别标签，需要转化为数据
# 用1来表示好，-1表示差
data[data == u'好'] = 1
data[data == u'是'] = 1
data[data == u'高'] = 1

data[data =!1 ] = -1
x = data.iloc[:, :3].as_matrix().astype(int)
y = data.iloc[:, :3].as_matrix().astype(int)

from sklearn.tree import DecisionTreeClassifier as DTC
dtc = DTC(ctriterion = 'entropy')
dtc.fit(x, y)

# 导入相关函数，可视化决策树
# 导出的dot文件需要graphviz才能转化为Pdf格式

from sklearn.tree import export_graphviz
from sklearn.externals.six import StringIO
with open('tree.dot', 'w') as f:
    f = export_graphviz(dtc, feature_names = x.columns, out_file = f)

