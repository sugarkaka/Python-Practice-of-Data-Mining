b = map(lambda x : x+2, a)
c = reduce(lambda x, y : x * y, range(1, n+1))
d = filter(lambda x : x > 5 and x <8, range(10))

# codelist 1
import numpy as np
a = np.array[2, 0, 1, 5]
print a 
print a[:3]
print a.min()
a.sort()
b = np.array([1, 2, 3], [4, 5, 6])
print b * b


# codelist 2
from scipy.optimize import fsolve
def f(x)ï¼š
    x1 = x[0]
	x2 = x[1]
	return [2*x1 - x2**2 -1, x12**2 -x2 -2]
result = fsolve(f, [1, 1])
print result


# codelist 3
import numpy as np
import matplotlib.pyplot as plt
x = np.linspace(0, 10, 1000)
y = np.sin(x) + 1
z = np.cos(x ** 2) + 1

plt.figure(figsize = (8, 4))
plt.plot(x, y, label = '$\sin x + 1$', color = 'red', linewidth = 2)
plt.plot(x, zm 'b--', label = '$\cos ^2 + 1$')
plt.xlabel('Time(s)')
plt.ylabel('Volt')
plt.title('A Sample Example')
plt.ylim(0, 2.2)
plt.legend()
plt.show()

# codelist 4
import pandas as pd
s = pd.Series([1, 2, 3], index = ['a', 'b', 'c'])
d1 = pd.DataFrame([1, 2, 3], [4, 5, 6], columns = ['a', 'b', 'c'])
d2 = pd.DataFrame(s)
d.head()
d.describe()


# codelist 5
from statsmodels.tsa.stattools import adfuller as ADF
import numpy as np
ADF(np.random.rand(100))


# codelist 6
from sklearn.linear_model import LinearRegression
model = LinerRegression()
print model

from sklearn import datasets 
iris = datasets.load_iris()
print iris.data.shape

from sklearn import svm
clf = svm.LinearSVC()
clf.fit(iris.data, iris.target)
clf.predict([[5.0, 3.6, 1.3, 0.25]])
clf.coef_

# codelist 7
import pandas as pd
catering_sale = 'catering_sale.xls'
data = pd.read_excel(catering_sale, index_col = u'æ—¥æœŸ')
data.describe()
