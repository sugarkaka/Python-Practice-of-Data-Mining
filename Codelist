b = map(lambda x : x+2, a)
c = reduce(lambda x, y : x * y, range(1, n+1))
d = filter(lambda x : x > 5 and x <8, range(10))

# codelist 1
import numpy as np
a = np.array[2, 0, 1, 5]
print a 
print a[:3]
print a.min()
a.sort()
b = np.array([1, 2, 3], [4, 5, 6])
print b * b


# codelist 2
from scipy.optimize import fsolve
def f(x)：
    x1 = x[0]
	x2 = x[1]
	return [2*x1 - x2**2 -1, x12**2 -x2 -2]
result = fsolve(f, [1, 1])
print result


# codelist 3
import numpy as np
import matplotlib.pyplot as plt
x = np.linspace(0, 10, 1000)
y = np.sin(x) + 1
z = np.cos(x ** 2) + 1

plt.figure(figsize = (8, 4))
plt.plot(x, y, label = '$\sin x + 1$', color = 'red', linewidth = 2)
plt.plot(x, zm 'b--', label = '$\cos ^2 + 1$')
plt.xlabel('Time(s)')
plt.ylabel('Volt')
plt.title('A Sample Example')
plt.ylim(0, 2.2)
plt.legend()
plt.show()

# codelist 4
import pandas as pd
s = pd.Series([1, 2, 3], index = ['a', 'b', 'c'])
d1 = pd.DataFrame([1, 2, 3], [4, 5, 6], columns = ['a', 'b', 'c'])
d2 = pd.DataFrame(s)
d.head()
d.describe()


# codelist 5
from statsmodels.tsa.stattools import adfuller as ADF
import numpy as np
ADF(np.random.rand(100))


# codelist 6
from sklearn.linear_model import LinearRegression
model = LinerRegression()
print model

from sklearn import datasets 
iris = datasets.load_iris()
print iris.data.shape

from sklearn import svm
clf = svm.LinearSVC()
clf.fit(iris.data, iris.target)
clf.predict([[5.0, 3.6, 1.3, 0.25]])
clf.coef_

# codelist 7
import pandas as pd
catering_sale = 'catering_sale.xls'
data = pd.read_excel(catering_sale, index_col = u'日期')
data.describe()

import matplotlib.pyplot as plt
plt.rcParams['font.sans-serif'] =  ['SimHei']
plt.rParams['axes.unicode_minus'] = False

plt.figure()
p = data.boxplot()
x = p['fliers'][0].get_xdata()
y = p['fliers'][0].get_ydata()
y.sort()

for i in range(len(x)):
    if i > 0:
	    plt.annotate(y[i], xy = (x[i], y[i]), xytext = (x[i] + 0.05 - 0.8/y[i] - y[i-1], y[i]))
    else:
	    plt.annotate(y[i], xy = (x[i], y[i]), xytext = (x[i] + 0.08, y[i]))
plt.show()

# codelist 8
#-*- coding: utf-8 -*-
from __future__ import print_function
import pandas as pd

catering_sale = 'catering_sale.xls'
data = pd.read_excel(catering_sale, index_col = u'日期')
data = data[(data[u'销量'] > 400) and (data[u'销量'] < 5000)]
statistics = data.describe()

statistics.loc['range'] = statistics.loc['max'] - statistics.loc['min']
statistics.loc['var'] = statistics.loc['std'] / statistics.loc['mean']
statistics.loc['dis'] = statistics.loc['75%'] - statistics.loc['25%']
print statistics

# codelist 9
#-*- coding: utf-8 -*-
from __future__ import print_function
import pandas as pd

dish_profit = 'catering_dish_profit.xls'
data = pd.read_excel(dish_profit, index_col = u'菜品名')
data = data[u'盈利'].copy()

import matplotlib.pyplot as plt
plt.rcParams['font.sans-serif'] =  ['SimHei']
plt.rParams['axes.unicode_minus'] = False

plt.figure()
data.plot(kind = 'bar')
plt.ylabel =(u'盈利（元）')
p = 1.0 * data.cumsum()/data.sum()
p.plot(color = 'r', secondary_y = True, style = '-o', linewidth = 2)
plt.annotate(format(p[6], '.4%'), xy = (6, p[6]), xytext = (6 * 0.9, p[6]* 0.9), 
    arrowprops = dict(arrowstyle = '->', connectionstyle = 'arc3, rad =.2'))
plt.ylabel(u'盈利（比例）')
plt.show()

# codelist 10
#-*- coding: utf-8 -*-
from __future__ import print_function
import pandas as pd
catering_sale = 'catering_sale.xls'
data = pd.read_excel(catering_sale, index_col = u'日期')
data.corr()
data.corr()[u'蒸凤爪']
data[u'蒸凤爪'].corr(data(u'煎饺'))

# codelist 11
import matplotlib.pyplot as plt
plt.rcParams['font.sans-serif'] =  ['SimHei']
plt.rParams['axes.unicode_minus'] = False
plt.figure(figsize = (7, 5))

import numpy as np
x = np.linspace(0, 2*np.pi,50)
y = np.sin(x)
plt,plot(x, y, 'bp--')
plt.show()

# codelist 12
import matplotlib.pyplot as plt
plt.rcParams['font.sans-serif'] =  ['SimHei']
plt.rParams['axes.unicode_minus'] = False

labels = 'Frogs', 'Hogs', 'Dogs', 'Logs'
sizes = [15, 30, 45, 10]
colors = ['yellowgreen', 'gold', 'lightskyblue', 'lightcoral']
explode = (0, 0.1, 0, 0)

plt.pie(sizes, explode = explode, labels = labels, colors = colors, autopct = '%1.1f%%, shadow = True,, startangle = 90)
plt.axis('equal')
plt.show()

# codelist 13
import matplotlib.pyplot as plt
import numpy as np
x = np.random.randn(1000)
plt.hist(x, 10)
plt.show()

# codelist 14
import matplotlib.pyplot as plt
import numpy as np
x = np.random.randn(1000)
D= pd.DataFrame(x, x + 1).T
D.plot(kind = 'bar')
plt.show()

# codelist 15
import matplotlib.pyplot as plt
import numpy as np
import pandas as pd
y = pd.Series(np.sin(np.arange(10)))
y.plot(yerr = error)
plt.show()
